package euler;
import mypackage.*;

// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

public class eulerProblem12 {			//RISOLTO
	public static long DivisorsOfTriangle(int x) {
		int divisori = 0;
		long i = 1;
		long triangle = 0;
		while (divisori <= x) {
			divisori = 0;
			triangle = triangle + i;
			i += 1;
			long limit = (long)Math.sqrt((double)triangle);
			for (long h = 1; h <= limit; h++) {
				if (triangle%h == 0) {
					divisori += 1;
				}
			}
			if (Aritmetica.isSquare(triangle) == true) {
				divisori = divisori*2-1;
			}
			else {
				divisori = divisori*2;
			}
//too slow  // if (array.isSquare(triangle) == true) {
			// 	divisori = (array.FattoriPrimi(triangle)).length*2-1;
			// }
			// else {
			// 	divisori = (array.FattoriPrimi(triangle)).length*2;
			// }
			System.out.println(triangle);
			System.out.println(divisori);
		}
		return triangle;
	}

	public static void main(String[] args) {
		System.out.println(DivisorsOfTriangle(500));
	}
}